import * as vueTs from '@volar/vue-typescript';
import { SourceMapBase, Mapping } from '@volar/source-map';
import { TextDocument } from 'vscode-languageserver-textdocument';
import { EmbeddedFileMappingData, TeleportMappingData, TeleportSideData } from '@volar/vue-code-gen';
import * as vscode from 'vscode-languageserver-protocol';
import type * as ts2 from '@volar/typescript-language-service';
import type * as _ from '@volar/vue-typescript/node_modules/@vue/reactivity';
export declare type VueDocuments = ReturnType<typeof parseVueDocuments>;
export declare type VueDocument = ReturnType<typeof parseVueDocument>;
export interface ITemplateScriptData {
    components: string[];
    componentItems: vscode.CompletionItem[];
}
export declare class SourceMap<Data = undefined> extends SourceMapBase<Data> {
    sourceDocument: TextDocument;
    mappedDocument: TextDocument;
    _mappings?: Mapping<Data>[] | undefined;
    constructor(sourceDocument: TextDocument, mappedDocument: TextDocument, _mappings?: Mapping<Data>[] | undefined);
    getSourceRange<T extends number | vscode.Position>(start: T, end?: T, filter?: (data: Data) => boolean): [{
        start: T;
        end: T;
    }, Data] | undefined;
    getMappedRange<T extends number | vscode.Position>(start: T, end?: T, filter?: (data: Data) => boolean): [{
        start: T;
        end: T;
    }, Data] | undefined;
    getSourceRanges<T extends number | vscode.Position>(start: T, end?: T, filter?: (data: Data) => boolean): Generator<[{
        start: T;
        end: T;
    }, Data], void, unknown>;
    getMappedRanges<T extends number | vscode.Position>(start: T, end?: T, filter?: (data: Data) => boolean): Generator<[{
        start: T;
        end: T;
    }, Data], void, unknown>;
    protected getRanges<T extends number | vscode.Position>(start: T, end: T, sourceToTarget: boolean, filter?: (data: Data) => boolean): Generator<[{
        start: T;
        end: T;
    }, Data], void, unknown>;
}
export declare class EmbeddedDocumentSourceMap extends SourceMap<EmbeddedFileMappingData> {
    embeddedFile: vueTs.EmbeddedFile;
    sourceDocument: TextDocument;
    mappedDocument: TextDocument;
    constructor(embeddedFile: vueTs.EmbeddedFile, sourceDocument: TextDocument, mappedDocument: TextDocument, _sourceMap: vueTs.EmbeddedFileSourceMap);
}
export declare class TeleportSourceMap extends SourceMap<TeleportMappingData> {
    embeddedFile: vueTs.EmbeddedFile;
    document: TextDocument;
    constructor(embeddedFile: vueTs.EmbeddedFile, document: TextDocument, teleport: vueTs.Teleport);
    findTeleports(start: vscode.Position, end?: vscode.Position, filter?: (data: TeleportSideData) => boolean): Generator<readonly [{
        start: vscode.Position;
        end: vscode.Position;
    }, TeleportSideData], void, unknown>;
}
export declare function parseVueDocuments(vueLsCtx: vueTs.LanguageServiceContext, tsLs: ts2.LanguageService): {
    getAll: () => {
        uri: string;
        file: vueTs.SourceFile;
        embeddedDocumentsMap: {
            get: (source: vueTs.EmbeddedFile) => TextDocument;
        };
        sourceMapsMap: {
            get: (source: vueTs.Embedded) => EmbeddedDocumentSourceMap;
        };
        getTemplateData: () => Promise<ITemplateScriptData>;
        getSourceMaps: () => EmbeddedDocumentSourceMap[];
        getDocument: () => TextDocument;
        getTemplateTagsAndAttrs: () => {
            tags: Map<string, number[]>;
            attrs: Set<string>;
        };
        refs: {
            sourceMaps: _.ComputedRef<EmbeddedDocumentSourceMap[]>;
            teleports: _.ComputedRef<TeleportSourceMap[]>;
        };
    }[];
    get: (uri: string) => {
        uri: string;
        file: vueTs.SourceFile;
        embeddedDocumentsMap: {
            get: (source: vueTs.EmbeddedFile) => TextDocument;
        };
        sourceMapsMap: {
            get: (source: vueTs.Embedded) => EmbeddedDocumentSourceMap;
        };
        getTemplateData: () => Promise<ITemplateScriptData>;
        getSourceMaps: () => EmbeddedDocumentSourceMap[];
        getDocument: () => TextDocument;
        getTemplateTagsAndAttrs: () => {
            tags: Map<string, number[]>;
            attrs: Set<string>;
        };
        refs: {
            sourceMaps: _.ComputedRef<EmbeddedDocumentSourceMap[]>;
            teleports: _.ComputedRef<TeleportSourceMap[]>;
        };
    } | undefined;
    fromEmbeddedDocument: (document: TextDocument) => {
        uri: string;
        file: vueTs.SourceFile;
        embeddedDocumentsMap: {
            get: (source: vueTs.EmbeddedFile) => TextDocument;
        };
        sourceMapsMap: {
            get: (source: vueTs.Embedded) => EmbeddedDocumentSourceMap;
        };
        getTemplateData: () => Promise<ITemplateScriptData>;
        getSourceMaps: () => EmbeddedDocumentSourceMap[];
        getDocument: () => TextDocument;
        getTemplateTagsAndAttrs: () => {
            tags: Map<string, number[]>;
            attrs: Set<string>;
        };
        refs: {
            sourceMaps: _.ComputedRef<EmbeddedDocumentSourceMap[]>;
            teleports: _.ComputedRef<TeleportSourceMap[]>;
        };
    } | undefined;
    sourceMapFromEmbeddedDocumentUri: (uri: string) => EmbeddedDocumentSourceMap | undefined;
    teleportfromEmbeddedDocumentUri: (uri: string) => TeleportSourceMap | undefined;
    fromEmbeddedLocation: (uri: string, start: vscode.Position, end?: vscode.Position, filter?: ((data: EmbeddedFileMappingData) => boolean) | undefined, sourceMapFilter?: ((sourceMap: vueTs.EmbeddedFileSourceMap) => boolean) | undefined) => Generator<{
        uri: string;
        range: {
            start: vscode.Position;
            end: vscode.Position;
        };
        sourceMap: EmbeddedDocumentSourceMap;
        data: EmbeddedFileMappingData;
    } | {
        uri: string;
        range: {
            start: vscode.Position;
            end: vscode.Position;
        };
        sourceMap?: undefined;
        data?: undefined;
    }, void, unknown>;
};
export declare function parseVueDocument(vueFile: vueTs.SourceFile, tsLs: ts2.LanguageService | undefined): {
    uri: string;
    file: vueTs.SourceFile;
    embeddedDocumentsMap: {
        get: (source: vueTs.EmbeddedFile) => TextDocument;
    };
    sourceMapsMap: {
        get: (source: vueTs.Embedded) => EmbeddedDocumentSourceMap;
    };
    getTemplateData: () => Promise<ITemplateScriptData>;
    getSourceMaps: () => EmbeddedDocumentSourceMap[];
    getDocument: () => TextDocument;
    getTemplateTagsAndAttrs: () => {
        tags: Map<string, number[]>;
        attrs: Set<string>;
    };
    refs: {
        sourceMaps: _.ComputedRef<EmbeddedDocumentSourceMap[]>;
        teleports: _.ComputedRef<TeleportSourceMap[]>;
    };
};
export declare function useCacheMap<T extends object, K>(parse: (t: T) => K): {
    get: (source: T) => K;
};
