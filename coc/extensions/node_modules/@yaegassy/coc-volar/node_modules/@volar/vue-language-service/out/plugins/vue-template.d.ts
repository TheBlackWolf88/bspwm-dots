import type * as ts2 from '@volar/typescript-language-service';
import { EmbeddedLanguageServicePlugin } from '@volar/vue-language-service-types';
import * as html from 'vscode-html-languageservice';
import * as vscode from 'vscode-languageserver-protocol';
import { TextDocument } from 'vscode-languageserver-textdocument';
import type * as vueTs from '@volar/vue-typescript';
import { VueDocuments } from '../vueDocuments';
import useHtmlPlugin from './html';
export declare const semanticTokenTypes: string[];
export default function useVueTemplateLanguagePlugin<T extends ReturnType<typeof useHtmlPlugin>>(options: {
    ts: typeof import('typescript/lib/tsserverlibrary');
    getSemanticTokenLegend(): vscode.SemanticTokensLegend;
    getScanner(document: TextDocument): html.Scanner | undefined;
    tsLs: ts2.LanguageService;
    templateLanguagePlugin: T;
    isSupportedDocument: (document: TextDocument) => boolean;
    getNameCases?: (uri: string) => Promise<{
        tag: 'both' | 'kebabCase' | 'pascalCase';
        attr: 'kebabCase' | 'camelCase';
    }>;
    vueLsHost: vueTs.LanguageServiceHost;
    vueDocuments: VueDocuments;
    tsSettings: ts2.Settings;
}): EmbeddedLanguageServicePlugin & T;
