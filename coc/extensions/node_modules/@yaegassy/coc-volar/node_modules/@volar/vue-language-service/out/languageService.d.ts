import { ConfigurationHost, EmbeddedLanguageServicePlugin } from '@volar/vue-language-service-types';
import * as vueTs from '@volar/vue-typescript';
import type * as ts from 'typescript/lib/tsserverlibrary';
import type * as html from 'vscode-html-languageservice';
import * as json from 'vscode-json-languageservice';
import * as vscode from 'vscode-languageserver-protocol';
import * as executeCommand from './languageFeatures/executeCommand';
import { LanguageServiceRuntimeContext } from './types';
export interface LanguageService extends ReturnType<typeof createLanguageService> {
}
export declare function getSemanticTokenLegend(): vscode.SemanticTokensLegend;
export declare function createLanguageService({ typescript: ts }: {
    typescript: typeof import('typescript/lib/tsserverlibrary');
}, vueLsHost: vueTs.LanguageServiceHost, fileSystemProvider: html.FileSystemProvider | undefined, schemaRequestService: json.SchemaRequestService | undefined, configurationHost: ConfigurationHost | undefined, customPlugins: EmbeddedLanguageServicePlugin[], getNameCases?: (uri: string) => Promise<{
    tag: 'both' | 'kebabCase' | 'pascalCase';
    attr: 'kebabCase' | 'camelCase';
}>, createLanguageServiceContext?: () => {
    typescriptLanguageServiceHost: ts.LanguageServiceHost;
    typescriptLanguageService: ts.LanguageService;
    readonly sourceFiles: {
        get: (fileName: string) => vueTs.SourceFile;
        delete: (fileName: string) => boolean;
        has: (fileName: string) => boolean;
        set: (fileName: string, vueFile: vueTs.SourceFile) => vueTs.SourceFile;
        getFileNames: () => string[];
        getDirs: () => string[];
        getAll: () => vueTs.SourceFile[];
        getTeleport: (fileName: string) => vueTs.Teleport | undefined;
        getAllEmbeddeds: () => Generator<{
            vueFile: vueTs.SourceFile;
            embedded: vueTs.Embedded;
        }, void, unknown>;
        fromEmbeddedLocation: (fileName: string, start: number, end?: number | undefined, filter?: ((data: import("@volar/vue-code-gen").EmbeddedFileMappingData) => boolean) | undefined, sourceMapFilter?: ((sourceMap: vueTs.EmbeddedFileSourceMap) => boolean) | undefined) => Generator<{
            fileName: string;
            range: {
                start: number;
                end: number;
            };
            mapped: {
                vueFile: vueTs.SourceFile;
                embedded: vueTs.Embedded;
            };
            data: import("@volar/vue-code-gen").EmbeddedFileMappingData;
        } | {
            fileName: string;
            range: {
                start: number;
                end: number;
            };
            mapped?: undefined;
            data?: undefined;
        }, void, unknown>;
        fromEmbeddedFile: (file: vueTs.EmbeddedFile) => vueTs.SourceFile | undefined;
        fromEmbeddedFileName: (fileName: string) => {
            vueFile: vueTs.SourceFile;
            embedded: vueTs.Embedded;
        } | undefined;
    };
}): {
    doValidation: (uri: string, response?: ((result: html.Diagnostic[]) => void) | undefined, isCancel?: (() => Promise<boolean>) | undefined) => Promise<Promise<html.Diagnostic[]>>;
    findReferences: (uri: string, position: html.Position) => Promise<Promise<html.Location[] | undefined>>;
    findFileReferences: (uri: string) => Promise<Promise<html.Location[] | undefined>>;
    findDefinition: (uri: string, position: html.Position) => Promise<Promise<vscode.LocationLink[] | undefined>>;
    findTypeDefinition: (uri: string, position: html.Position) => Promise<Promise<vscode.LocationLink[] | undefined>>;
    findImplementations: (uri: string, position: html.Position) => Promise<Promise<vscode.LocationLink[] | undefined>>;
    prepareRename: (uri: string, position: html.Position) => Promise<Promise<html.Range | vscode.ResponseError<void> | undefined>>;
    doRename: (uri: string, position: html.Position, newName: string) => Promise<Promise<html.WorkspaceEdit | undefined>>;
    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<Promise<html.WorkspaceEdit | undefined>>;
    getSemanticTokens: (uri: string, range?: html.Range | undefined, cancleToken?: vscode.CancellationToken | undefined, reportProgress?: ((tokens: import("@volar/vue-language-service-types").SemanticToken[]) => void) | undefined) => Promise<Promise<import("@volar/vue-language-service-types").SemanticToken[] | undefined> | undefined>;
    doHover: (uri: string, position: html.Position) => Promise<Promise<html.Hover | undefined>>;
    doComplete: (uri: string, position: html.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<Promise<{
        isIncomplete: boolean;
        items: html.CompletionItem[];
    }>>;
    doCodeActions: (uri: string, range: html.Range, codeActionContext: json.CodeActionContext) => Promise<Promise<json.CodeAction[] | undefined>>;
    doCodeActionResolve: (item: json.CodeAction) => Promise<Promise<json.CodeAction>>;
    doCompletionResolve: (item: html.CompletionItem, newPosition?: html.Position | undefined) => Promise<Promise<html.CompletionItem>>;
    getSignatureHelp: (uri: string, position: html.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<Promise<html.SignatureHelp | undefined>>;
    doCodeLens: (uri: string) => Promise<Promise<vscode.CodeLens[]>>;
    doCodeLensResolve: (item: vscode.CodeLens) => Promise<Promise<vscode.CodeLens>>;
    findDocumentHighlights: (uri: string, position: html.Position) => Promise<Promise<html.DocumentHighlight[] | undefined>>;
    findDocumentLinks: (uri: string) => Promise<Promise<html.DocumentLink[]>>;
    findWorkspaceSymbols: (query: string) => Promise<Promise<html.SymbolInformation[]>>;
    doAutoInsert: (uri: string, position: html.Position, autoInsertContext: {
        lastChange: {
            range: html.Range;
            rangeOffset: number;
            rangeLength: number;
            text: string;
        };
    }) => Promise<Promise<string | html.TextEdit | undefined>>;
    doExecuteCommand: (command: string, args: executeCommand.ExecutePluginCommandArgs, executeCommandContext: import("@volar/vue-language-service-types").ExecuteCommandContext) => Promise<Promise<void>>;
    getInlayHints: (uri: string, range: html.Range) => Promise<Promise<vscode.InlayHint[] | undefined>>;
    callHierarchy: {
        doPrepare: (uri: string, position: html.Position) => Promise<Promise<vscode.CallHierarchyItem[] | undefined>>;
        getIncomingCalls: (item: vscode.CallHierarchyItem) => Promise<Promise<vscode.CallHierarchyIncomingCall[]>>;
        getOutgoingCalls: (item: vscode.CallHierarchyItem) => Promise<Promise<vscode.CallHierarchyOutgoingCall[]>>;
    };
    dispose: () => void;
    __internal__: {
        vueRuntimeContext: {
            typescriptLanguageServiceHost: ts.LanguageServiceHost;
            typescriptLanguageService: ts.LanguageService;
            readonly sourceFiles: {
                get: (fileName: string) => vueTs.SourceFile;
                delete: (fileName: string) => boolean;
                has: (fileName: string) => boolean;
                set: (fileName: string, vueFile: vueTs.SourceFile) => vueTs.SourceFile;
                getFileNames: () => string[];
                getDirs: () => string[];
                getAll: () => vueTs.SourceFile[];
                getTeleport: (fileName: string) => vueTs.Teleport | undefined;
                getAllEmbeddeds: () => Generator<{
                    vueFile: vueTs.SourceFile;
                    embedded: vueTs.Embedded;
                }, void, unknown>;
                fromEmbeddedLocation: (fileName: string, start: number, end?: number | undefined, filter?: ((data: import("@volar/vue-code-gen").EmbeddedFileMappingData) => boolean) | undefined, sourceMapFilter?: ((sourceMap: vueTs.EmbeddedFileSourceMap) => boolean) | undefined) => Generator<{
                    fileName: string;
                    range: {
                        start: number;
                        end: number;
                    };
                    mapped: {
                        vueFile: vueTs.SourceFile;
                        embedded: vueTs.Embedded;
                    };
                    data: import("@volar/vue-code-gen").EmbeddedFileMappingData;
                } | {
                    fileName: string;
                    range: {
                        start: number;
                        end: number;
                    };
                    mapped?: undefined;
                    data?: undefined;
                }, void, unknown>;
                fromEmbeddedFile: (file: vueTs.EmbeddedFile) => vueTs.SourceFile | undefined;
                fromEmbeddedFileName: (fileName: string) => {
                    vueFile: vueTs.SourceFile;
                    embedded: vueTs.Embedded;
                } | undefined;
            };
        };
        rootPath: string;
        context: LanguageServiceRuntimeContext;
        getContext: () => Promise<LanguageServiceRuntimeContext>;
        detectTagNameCase: (uri: string) => Promise<Promise<{
            tag: "both" | "kebabCase" | "pascalCase" | "unsure";
            attr: "kebabCase" | "unsure" | "camelCase";
        }>>;
    };
};
